{"version":3,"sources":["webpack://src/index.scss","webpack://src/App.scss","webpack://src/features/alertMsg/AlertMsg.scss","webpack://node_modules/bootstrap/scss/mixins/_breakpoints.scss","webpack://src/features/wrapper/Wrapper.scss","webpack://src/features/userForm/UserForm.scss","webpack://src/utils/_component.scss","webpack://src/features/header/Header.scss","webpack://src/features/quizPanel/QuizPanel.scss","webpack://src/features/loading/Loading.scss"],"names":[],"mappings":"AAAA,KACE,QAAA,CACA,mJAAA,CAGA,kCAAA,CACA,iCAAA,CAGF,KACE,yEAAA,CCVF,KACE,iBAAA,CAGF,UACE,aAAA,CACA,mBAAA,CAGF,6CACE,UACE,wDAAA,CAAA,gDAAA,CAAA,CAIJ,YACE,gBAAA,CACA,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,sBAAA,CACA,4BAAA,CAGF,UACE,aAAA,CAGF,kCACE,GACE,+BAAA,CAAA,uBAAA,CAEF,IACE,kCAAA,CAAA,0BAAA,CAEF,GACE,+BAAA,CAAA,uBAAA,CAAA,CARJ,0BACE,GACE,+BAAA,CAAA,uBAAA,CAEF,IACE,kCAAA,CAAA,0BAAA,CAEF,GACE,+BAAA,CAAA,uBAAA,CAAA,CClCJ,eACE,wBAAA,CACA,QAAA,CACA,QAAA,CACA,iCAAA,CAAA,yBAAA,CACA,YAAA,CACA,SAAA,CACA,iBAAA,CCsDE,wBD7DJ,eASI,UAAA,CAAA,CETJ,SACE,+BAAA,CACA,gBAAA,CACA,UAAA,CACA,6IAAA,CCJF,mBACE,SAAA,CACA,YAAA,CACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,sCAAA,CAAA,8BAAA,CAKA,2CAHE,iBAAA,CACA,UAKA,CAHF,qBAGE,gBAAA,CAEF,wBACE,SAAA,CACA,WAAA,CACA,YAAA,CACA,qBAAA,CACA,aAAA,CAAA,QAAA,CAGE,2FACE,eAAA,CACA,UCvBK,CD0BT,kCAEE,iBAAA,CACA,UAAA,CACA,qBAAA,CACA,wBC5BG,CD6BH,WAAA,CACA,YAAA,CACA,eAAA,CACA,8BAAA,CACA,wCACE,6BAAA,CAAA,qBAAA,CExCR,OACE,iBAAA,CACA,YAAA,CACA,4BAAA,CACA,kBAAA,CACA,kBAAA,CACA,UAAA,CAEA,mBAAA,CACA,WAAA,CACA,kBAAA,CACA,UDRW,CEHb,oBACE,cAAA,CACA,yBACE,mBAAA,CACA,mCACE,wBAAA,CACA,qCACE,eAAA,CAEF,6CACE,kBAAA,CAGJ,oCACE,mBAAA,CAEA,+BAAA,CACA,WAAA,CACA,YAAA,CACA,eAAA,CACA,8BAAA,CACA,wBFfG,CEgBH,0CACE,6BAAA,CAAA,qBAAA,CAGJ,gCACE,eAAA,CACA,cAAA,CACA,iBAAA,CACA,qCACE,SAAA,CACA,eAAA,CClCR,SACE,iBAAA,CACA,OAAA,CACA,QAAA,CACA,sCAAA,CAAA,8BAAA","file":"main.19a71407.chunk.css","sourcesContent":["body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n",".App {\n  text-align: center;\n}\n\n.App-logo {\n  height: 40vmin;\n  pointer-events: none;\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  .App-logo {\n    animation: App-logo-float infinite 3s ease-in-out;\n  }\n}\n\n.App-header {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n}\n\n.App-link {\n  color: rgb(112, 76, 182);\n}\n\n@keyframes App-logo-float {\n  0% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(10px);\n  }\n  100% {\n    transform: translateY(0px);\n  }\n}\n","@import \"../../utils/component\";\r\n\r\n.bottom-center {\r\n  position: fixed !important;\r\n  bottom: 0;\r\n  left: 50%;\r\n  transform: translate(-50%);\r\n  z-index: 6000; //to be activate even on the modal pop-up\r\n  width: 90%;\r\n  text-align: center;\r\n  @include media-breakpoint-up(md) {\r\n    width: auto;\r\n  }\r\n}\r\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n","@import \"../../utils/component\";\r\n\r\n.wrapper {\r\n  font-family: \"Cuprum\", sans-serif;\r\n  min-height: 100vh;\r\n  width: 100%;\r\n  background: radial-gradient(circle 200px at center, #81f7fddf 0%, #6ad6f1ec 50%, #74c3fc 100%);\r\n}\r\n","@import \"../../utils/component\";\r\n\r\n.userFormContainer {\r\n  width: 90%;\r\n  padding: 2rem;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  h1 {\r\n    text-align: center;\r\n    color: $textColor2;\r\n  }\r\n  p {\r\n    text-align: center;\r\n    color: $textColor2;\r\n    font-size: 1.5rem;\r\n  }\r\n  form {\r\n    width: 90%;\r\n    margin: auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n    .userForm,\r\n    .transactionCategory {\r\n      label {\r\n        text-align: left;\r\n        color: $textColor2;\r\n      }\r\n    }\r\n    .startBtn {\r\n      margin: auto;\r\n      text-align: center;\r\n      width: 15vw;\r\n      margin-top: 2rem;\r\n      background-color: $accent;\r\n      border: none;\r\n      outline: none;\r\n      box-shadow: none;\r\n      transition: all 0.5s ease-in-out;\r\n      &:hover {\r\n        transform: scale(1.05);\r\n      }\r\n    }\r\n  }\r\n}\r\n","@import \"~bootstrap/scss/_functions.scss\";\r\n@import \"~bootstrap/scss/_variables.scss\";\r\n@import \"~bootstrap/scss/mixins/_breakpoints.scss\";\r\n/* color palette */\r\n$textColor1: black;\r\n$textColor2: white;\r\n$bgColor: #f2f4e8;\r\n$boxColor: #b4b7a2;\r\n$accent: #eba15a;","@import \"../../utils/component\";\r\n\r\nheader {\r\n  text-align: center;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  flex-direction: row;\r\n  width: 100%;\r\n  padding: 1rem 0;\r\n  padding-top: 2rem;\r\n  height: 50px;\r\n  margin-bottom: 1rem;\r\n  color: $textColor2;\r\n}\r\n","@import \"../../utils/component\";\r\n\r\n.quizPanelContainer {\r\n  padding: 0 2rem;\r\n  .row {\r\n    padding-bottom: 2rem;\r\n    .quizForm {\r\n      padding: 0 2rem !important;\r\n      p {\r\n        font-weight: bold;\r\n      }\r\n      .checkBox {\r\n        margin-bottom: 1rem;\r\n      }\r\n    }\r\n    .submitBtn {\r\n      width: 30% !important;\r\n      margin: auto !important;\r\n      margin-top: 1rem !important;\r\n      border: none;\r\n      outline: none;\r\n      box-shadow: none;\r\n      transition: all 0.5s ease-in-out;\r\n      background-color: $accent;\r\n      &:hover {\r\n        transform: scale(1.05);\r\n      }\r\n    }\r\n    .score {\r\n      margin-top: 1rem;\r\n      font-size: 2rem;\r\n      text-align: center;\r\n      span {\r\n        color: red;\r\n        font-weight: bold;\r\n      }\r\n    }\r\n  }\r\n}\r\n",".spinner {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform:translate(-50%,-50%)\r\n}"]}