{"version":3,"sources":["features/alertMsg/alertMsgSlice.js","features/alertMsg/AlertMsg.js","features/wrapper/Wrapper.js","features/userForm/userSlice.js","features/userForm/categorySlice.js","features/userForm/UserForm.js","pages/home/Home.js","features/header/Header.js","features/quizPanel/quizSlice.js","features/loading/Loading.js","features/score/Score.js","features/quizPanel/QuizPanel.js","pages/quiz/Quiz.js","features/answerPanel/AnswerPanel.js","pages/answer/Answer.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["alertMsgSlice","createSlice","name","initialState","message","variant","show","reducers","showAlert","state","action","payload","hideAlert","actions","selectAlert","alert","AlertMsg","dispatch","useDispatch","useSelector","useEffect","setTimeout","Alert","className","Wrapper","children","userSlice","username","setUserInfo","userInfoSelector","userInfo","categorySlice","categoryList","topic","setCategory","setTopic","selectCategory","category","UserForm","navigate","useNavigate","useState","userName","setUserName","option","setOption","a","fetch","response","ok","statusText","json","trivia_categories","console","error","Container","fluid","Form","onSubmit","e","preventDefault","Group","Label","Control","type","placeholder","value","onFocus","onChange","target","Select","required","defaultValue","map","elem","index","Button","Home","Header","quizSlice","quizList","inputAnswer","setQuiz","setInputAnswer","selectQuiz","quiz","Loading","Spinner","animation","Score","props","navigateTo","location","onHide","Modal","size","centered","Title","as","id","Body","count","Footer","onClick","QuizPanel","checked","setChecked","setCount","modalShow","setModalShow","getCategoryId","targetTopic","find","categoryId","quizData","results","length","handleChange","questionNum","input","findIndex","answer","isChecked","el","Row","question","Check","label","answerArray","correctAnswer","correct_answer","inputArray","sort","b","i","undefined","Quiz","AnswerPanel","Answer","App","exact","path","element","store","configureStore","reducer","alertMsgReducer","userInfoReducer","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.031e3d28.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  message: \"\",\r\n  variant: \"dark\",\r\n  show: false\r\n};\r\n\r\nexport const alertMsgSlice = createSlice({\r\n  name: 'alert',\r\n  initialState,\r\n  reducers: {\r\n    showAlert: (state, action) => {\r\n      state.message = action.payload.message;\r\n      state.variant = action.payload.variant ? action.payload.variant : \"dark\";\r\n      state.show = true;\r\n    },\r\n    hideAlert: (state) => {\r\n      state.message = '';\r\n      state.variant = \"dark\";\r\n      state.show = false;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { showAlert, hideAlert } = alertMsgSlice.actions;\r\nexport const selectAlert = (state) => state.alert;\r\nexport default alertMsgSlice.reducer;","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectAlert, hideAlert } from \"./alertMsgSlice\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport \"./AlertMsg.scss\";\r\n\r\nconst AlertMsg = () => {\r\n  //redux\r\n  const dispatch = useDispatch();\r\n  const alert = useSelector(selectAlert);\r\n\r\n  useEffect(() => {\r\n    if (alert.show) {\r\n      setTimeout(() => {\r\n        dispatch(hideAlert());\r\n      }, 3000);\r\n    }\r\n  }, [alert, dispatch]);\r\n\r\n  return (\r\n    <>\r\n      <Alert variant={alert.variant} show={alert.show} className=\"bottom-center\">\r\n        {alert.message}\r\n      </Alert>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AlertMsg;","import React from 'react';\r\nimport \"./Wrapper.scss\";\r\n\r\nconst Wrapper = ({ children }) => {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Wrapper;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'userInfo',\r\n  initialState: {\r\n    username: \"\"\r\n  },\r\n  reducers: {\r\n    setUserInfo: (state, action) => {\r\n      return { ...state, username: action.payload };\r\n    }\r\n  }\r\n});\r\n\r\n//export reducer, actions,and state(selector)\r\nexport default userSlice.reducer;\r\nexport const { setUserInfo } = userSlice.actions;\r\nexport const userInfoSelector = (state) => state.userInfo;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const categorySlice = createSlice({\r\n  name: 'category',\r\n  initialState: {\r\n    categoryList: [],\r\n    topic: {}\r\n  },\r\n  reducers: {\r\n    setCategory: (state, action) => {\r\n      return { ...state, categoryList: action.payload };\r\n    },\r\n    setTopic: (state, action) => {\r\n      return { ...state, topic: action.payload };\r\n    }\r\n  }\r\n});\r\n\r\n//export reducer, actions,and state(selector)\r\nexport default categorySlice.reducer;\r\nexport const { setCategory, setTopic } = categorySlice.actions;\r\nexport const selectCategory = (state) => state.category;\r\n","import React, { useState, useEffect } from 'react';\r\nimport \"./UserForm.scss\";\r\nimport {\r\n  Container,\r\n  Form,\r\n  Button,\r\n} from 'react-bootstrap';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setUserInfo } from './userSlice';\r\nimport { showAlert } from \"../alertMsg/alertMsgSlice\";\r\nimport { setCategory, selectCategory, setTopic } from './categorySlice';\r\n\r\nconst UserForm = () => {\r\n\r\n  //router\r\n  const navigate = useNavigate();\r\n\r\n  //redux\r\n  const dispatch = useDispatch();\r\n  const category = useSelector(selectCategory);\r\n\r\n  //private state\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [option, setOption] = useState(\"\");\r\n\r\n  //method\r\n  //when the component is mounted\r\n  useEffect(async () => {\r\n    try {\r\n      const response = await fetch(\"https://opentdb.com/api_category.php\");\r\n      if (!response.ok) {\r\n        throw response.statusText;\r\n      } else {\r\n        //get data\r\n        const categoryList = await response.json();\r\n        //dispatch to reducer\r\n        dispatch(setCategory(categoryList.trivia_categories));\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error: failed to fetch category data ${error}`);\r\n    }\r\n  }, []);\r\n\r\n  //when the form is submitted\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    //validation check\r\n    if (userName === \"\" || option === \"\") {\r\n      dispatch(showAlert({\r\n        message: \"Please enter your user name and choose topic\",\r\n        variant: \"danger\",\r\n      }));\r\n      return false;\r\n    } else {\r\n      //dispatch username\r\n      dispatch(setUserInfo(userName));\r\n      //dispatch topic\r\n      dispatch(setTopic(option));\r\n      //navigate to login\r\n      navigate(\"/quiz\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container fluid className=\"userFormContainer\">\r\n        <h1>Welcome to Quiz App :)</h1>\r\n        <p>Enter your name and let't begin</p>\r\n        <Form onSubmit={handleSubmit}>\r\n          <Form.Group className=\"userForm\" >\r\n            <Form.Label>Name:</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Enter your name...\"\r\n              value={userName}\r\n              onFocus={() => setUserName(\"\")}\r\n              onChange={(e) => setUserName(e.target.value)} />\r\n          </Form.Group>\r\n          <Form.Group className=\"transactionCategory\">\r\n            <Form.Label>Topic:</Form.Label>\r\n            <Form.Select\r\n              required\r\n              defaultValue=\"Choose a topic...\"\r\n              value={option}\r\n              onChange={(e) => setOption(e.target.value)}>\r\n              <option>Choose...</option>\r\n              {category.categoryList.map((elem, index) => (\r\n                <option key={index}>{elem.name}</option>\r\n              ))}\r\n            </Form.Select>\r\n          </Form.Group>\r\n          <Button\r\n            className=\"startBtn\"\r\n            type=\"submit\">Start</Button>\r\n        </Form>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserForm;\r\n","import React from 'react';\r\nimport UserForm from '../../features/userForm/UserForm';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <>\r\n      <UserForm />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport \"./Header.scss\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { userInfoSelector } from \"../userForm/userSlice\";\r\nimport { selectCategory } from '../userForm/categorySlice';\r\n\r\nconst Header = () => {\r\n\r\n  //redux \r\n  const userInfo = useSelector(userInfoSelector);\r\n  const category = useSelector(selectCategory);\r\n\r\n  return (\r\n    <>\r\n      <header>\r\n        <h1>Hi {userInfo.username}!</h1>\r\n        <h2>Topic is <span>{category.topic}</span></h2>\r\n      </header>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const quizSlice = createSlice({\r\n  name: 'quiz',\r\n  initialState: {\r\n    quizList: [],\r\n    inputAnswer: []\r\n  },\r\n  reducers: {\r\n    setQuiz: (state, action) => {\r\n      return { ...state, quizList: action.payload };\r\n    },\r\n    setInputAnswer: (state,action) => {\r\n      return { ...state, inputAnswer: action.payload };\r\n    }\r\n  }\r\n});\r\n\r\n//export reducer, actions,and state(selector)\r\nexport default quizSlice.reducer;\r\nexport const { setQuiz, setInputAnswer } = quizSlice.actions;\r\nexport const selectQuiz = (state) => state.quiz;\r\n","import { Container, Spinner } from \"react-bootstrap\";\r\nimport \"./Loading.scss\";\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <Container fluid className=\"spinner d-flex h-100 align-items-center justify-content-center\">\r\n            <Spinner\r\n                animation=\"border\"\r\n                variant=\"light\" />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Loading;","import React from 'react';\r\nimport \"./Score.scss\";\r\nimport {\r\n  Modal,\r\n  Button\r\n} from 'react-bootstrap';\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Score = (props) => {\r\n\r\n  //router\r\n  const navigate = useNavigate();\r\n\r\n  const navigateTo = (location) => {\r\n    if (location === \"home\") {\r\n      navigate(\"/\");\r\n    } else {\r\n      navigate(\"/answer\");\r\n    };\r\n    props.onHide();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        show={props.show}\r\n        className=\"scoreModal\"\r\n        onHide={props.onHide}\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title as=\"h3\" id=\"contained-modal-title-vcenter\">\r\n            Your Score\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <p className=\"score\">\r\n           <span>{props.count}</span> / 10\r\n          </p>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            className=\"toHomeBtn\"\r\n            type=\"button\"\r\n            onClick={() => navigateTo(\"home\")}>Return to Home</Button>\r\n          <Button\r\n            className=\"toAnswerBtn\"\r\n            type=\"button\"\r\n            onClick={() => navigateTo(\"answer\")}>Check correct answer</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Score;\r\n","import React, { useEffect, useState } from 'react';\r\nimport \"./QuizPanel.scss\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Button,\r\n  Form\r\n} from 'react-bootstrap';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { selectCategory } from '../userForm/categorySlice';\r\nimport { selectQuiz, setQuiz, setInputAnswer } from './quizSlice';\r\nimport { showAlert } from \"../alertMsg/alertMsgSlice\";\r\nimport Loading from '../loading/Loading';\r\nimport Score from '../score/Score';\r\n\r\nconst QuizPanel = () => {\r\n\r\n  //router\r\n  const navigate = useNavigate();\r\n\r\n  //redux\r\n  const category = useSelector(selectCategory);\r\n  const quiz = useSelector(selectQuiz);\r\n  const dispatch = useDispatch();\r\n\r\n  //private state\r\n  const [checked, setChecked] = useState([]);\r\n  const [count, setCount] = useState();\r\n  const [modalShow, setModalShow] = useState(false);\r\n\r\n  //method\r\n  const getCategoryId = async (topic) => {\r\n    const targetTopic = category.categoryList.find(elem => elem.name === topic);\r\n    return targetTopic.id;\r\n  };\r\n\r\n  //when the component is mounted get quiz data\r\n  useEffect(async () => {\r\n    try {\r\n      const categoryId = await getCategoryId(category.topic);\r\n      const response = await fetch(`https://opentdb.com/api.php?amount=10&type=boolean&category=${categoryId}`);\r\n      if (!response.ok) {\r\n        throw response.statusText;\r\n      } else {\r\n        //get data\r\n        const quizData = await response.json();\r\n        if (quizData.results.length === 0) {\r\n          dispatch(showAlert({\r\n            message: \"Sorry no quiz list prepared :( Please select another topic\",\r\n            variant: \"danger\",\r\n          }));\r\n          //return to home\r\n          navigate(\"/\");\r\n        } else {\r\n          //dispatch quiz\r\n          dispatch(setQuiz(quizData.results));\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error: failed to fetch category data ${error}`);\r\n    }\r\n  }, []);\r\n\r\n  const handleChange = (questionNum, input) => {\r\n    //first time check answer\r\n    if (checked.findIndex(e => e.questionNum === questionNum) === -1) {\r\n      setChecked([...checked, {\r\n        questionNum,\r\n        answer: input,\r\n        isChecked: true\r\n      }]);\r\n    } else {\r\n      //change answer\r\n      setChecked(checked.map(el => (el.questionNum === questionNum ? {\r\n        questionNum,\r\n        answer: input,\r\n        isChecked: true\r\n      } : el)));\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    //validation check\r\n    if (checked.length !== 10) {\r\n      dispatch(showAlert({\r\n        message: \"Please answer all questions\",\r\n        variant: \"danger\",\r\n      }));\r\n      return false;\r\n    } else {\r\n      //check answer\r\n      const answerArray = quiz.quizList.map((elem, index) => ({\r\n        questionNum: index + 1,\r\n        correctAnswer: elem.correct_answer\r\n      }));\r\n\r\n      //sort answer\r\n      const inputArray = checked.sort((a, b) => (a.questionNum - b.questionNum));\r\n\r\n      //dispatch to reducer for answer page\r\n      dispatch(setInputAnswer(inputArray));\r\n\r\n      let count = 0;\r\n      for (let i = 0; i < answerArray.length; i++) {\r\n        if (answerArray[i].correctAnswer === inputArray[i].answer) {\r\n          count++;\r\n        }\r\n      }\r\n      //calculate the number of correct answer\r\n      setCount(count);\r\n      //show score modal\r\n      setModalShow(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container fluid className=\"quizPanelContainer\">\r\n        {quiz.quizList.length !== 0 ? (\r\n          <>\r\n            <Row>\r\n              <h2>Quiz</h2>\r\n              {quiz.quizList.map((elem, index) => (\r\n                <Form\r\n                  key={index}\r\n                  className=\"quizForm\">\r\n                  <p>{index + 1}: {elem.question}</p>\r\n                  <Form.Group className=\"checkBox\">\r\n                    <Form.Check\r\n                      type=\"radio\"\r\n                      value=\"True\"\r\n                      label=\"True\"\r\n                      checked={checked.findIndex(e => e.questionNum === index + 1) !== -1 && checked[checked.findIndex(e => e.questionNum === index + 1)].isChecked === true && checked[checked.findIndex(e => e.questionNum === index + 1)].answer === \"True\"}\r\n                      onChange={() => handleChange(index + 1, \"True\")} />\r\n                    <Form.Check\r\n                      type=\"radio\"\r\n                      value=\"False\"\r\n                      label=\"False\"\r\n                      checked={checked.findIndex(e => e.questionNum === index + 1) !== -1 && checked[checked.findIndex(e => e.questionNum === index + 1)].isChecked === true && checked[checked.findIndex(e => e.questionNum === index + 1)].answer === \"False\"}\r\n                      onChange={() => handleChange(index + 1, \"False\")} />\r\n                  </Form.Group>\r\n                </Form>\r\n              ))}\r\n              <Button\r\n                className=\"submitBtn\"\r\n                type=\"button\"\r\n                onClick={handleSubmit}>Submit Answer</Button>\r\n            </Row>\r\n            {/* Score modal */}\r\n            {count !== undefined && (\r\n              <Score\r\n                show={modalShow}\r\n                onHide={() => setModalShow(false)}\r\n                count={count} />\r\n            )}\r\n          </>\r\n        ) :\r\n          (<Loading />)}\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuizPanel;\r\n","import React from 'react';\r\nimport Header from '../../features/header/Header';\r\nimport QuizPanel from '../../features/quizPanel/QuizPanel';\r\n\r\nconst Quiz = () => {\r\n  return (\r\n    <>\r\n      <Header />\r\n      <QuizPanel />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Quiz;\r\n","import React from 'react';\r\nimport \"./AnswerPanel.scss\";\r\nimport {\r\n  Container,\r\n  Row,\r\n  Button,\r\n} from 'react-bootstrap';\r\nimport { useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { selectQuiz } from '../quizPanel/quizSlice';\r\nimport { BsCheck2, BsX, BsCheckLg, BsXLg } from \"react-icons/bs\";\r\n\r\nconst AnswerPanel = () => {\r\n\r\n  //router\r\n  const navigate = useNavigate();\r\n\r\n  //redux\r\n  const quiz = useSelector(selectQuiz);\r\n\r\n  return (\r\n    <>\r\n      <Container fluid className=\"answerPanelContainer\">\r\n        <>\r\n          <Row>\r\n            <h2>Answer</h2>\r\n            {quiz.quizList.map((elem, index) => (\r\n              <div key={index}>\r\n                <p>{index + 1}: {elem.question}</p>\r\n                <div className=\"answer\">\r\n                  <p className=\"correctAnswer\">{elem.correct_answer}</p>\r\n                  <p className=\"inputAnswer\">(Your Anwer is : {quiz.inputAnswer[index].answer})</p>\r\n                  {elem.correct_answer === quiz.inputAnswer[index].answer ?\r\n                    <BsCheckLg className=\"correct\" /> :\r\n                    <BsXLg className=\"wrong\" />}\r\n                </div>\r\n              </div>\r\n            ))}\r\n            <Button\r\n              className=\"toHomeBtn\"\r\n              type=\"button\"\r\n              onClick={() => navigate(\"/\")}>Return to Home</Button>\r\n          </Row>\r\n        </>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AnswerPanel;\r\n","import React from 'react';\r\nimport Header from '../../features/header/Header';\r\nimport AnswerPanel from '../../features/answerPanel/AnswerPanel';\r\n\r\nconst Answer = () => {\r\n  return (\r\n    <>\r\n      <Header />\r\n      <AnswerPanel />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Answer;\r\n","import React from 'react';\nimport { HashRouter as Router, Route, Routes } from \"react-router-dom\";\nimport './App.scss';\nimport AlertMsg from './features/alertMsg/AlertMsg';\nimport Wrapper from './features/wrapper/Wrapper';\nimport Home from \"./pages/home/Home\";\nimport Quiz from './pages/quiz/Quiz';\nimport Answer from \"./pages/answer/Answer\"\n\nconst App = () => {\n  return (\n    <>\n      <Router>\n        <Wrapper>\n          <Routes>\n            <Route exact path=\"/\" element={<Home />} />\n            <Route exact path=\"/home\" element={<Home />} />\n            <Route exact path=\"/quiz\" element={<Quiz />} />\n            <Route exact path=\"/answer\" element={<Answer />} />\n          </Routes>\n        </Wrapper>\n      </Router>\n      <AlertMsg />\n    </>\n  );\n};\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport alertMsgReducer from \"../features/alertMsg/alertMsgSlice\";\nimport userInfoReducer from \"../features/userForm/userSlice\";\nimport categorySlice from '../features/userForm/categorySlice';\nimport quizSlice from '../features/quizPanel/quizSlice';\n\nexport const store = configureStore({\n  reducer: {\n    alert: alertMsgReducer,\n    userInfo: userInfoReducer,\n    category: categorySlice,\n    quiz: quizSlice\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}